@model PropMan.ViewModels.PropertyCreateViewModel

@{
    ViewBag.Title = "افزودن";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BedRoomsCount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BedRoomsCount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BedRoomsCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.Position, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ValidUntilPersianDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.ValidUntilPersianDate, new { @class = "form-control persian-date" })
            @Html.ValidationMessageFor(model => model.ValidUntilPersianDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AdType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.AdType, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.AdType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SaleUnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SaleUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SaleUnitPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RentDiposite, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RentDiposite, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RentDiposite, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RentMonthly, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.RentMonthly, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.RentMonthly, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="input-group">
                @Html.DropDownListFor(m => m.LocationId, null, new { @class = "form-control select2" })
                <div class="input-group-addon">
                    <span class="fa fa-map-pin"></span>
                </div>
            </div>
            @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PropertyTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.PropertyTypeId, (SelectList)ViewBag.PropertyTypeId, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PropertyTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control summernote" })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="ثبت" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("بازگشت به لیست", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>

        function AdTypeFieldChanger() {
            var selectedValue = $('#AdType').val();
            if (selectedValue == 0)//اجاره
            {
                $('#SaleUnitPrice').parentsUntil('.form-horizontal').hide();
                $('#RentDiposite').parentsUntil('.form-horizontal').show();
                $('#RentMonthly').parentsUntil('.form-horizontal').show();
            }
            else {
                $('#RentDiposite').parentsUntil('.form-horizontal').hide();
                $('#RentMonthly').parentsUntil('.form-horizontal').hide();
                $('#SaleUnitPrice').parentsUntil('.form-horizontal').show();
            }

        }

        //$(document).ready(function(){});
        $(function () {
            AdTypeFieldChanger();
            $('#AdType').on('change', function () {
                AdTypeFieldChanger();
            });
        });
    </script>
}
